name: NodeJS Build Multiple Architectures

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  create-release:
    name: Create Release and Tag Number
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_number.outputs.version }}
    steps:
      - name: Set Time Zone
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "America/Toronto"
      - name: Generate Version Number
        run: |
          echo "CUSTOMED_VERSION_NUMBER=v$(date +"%Y%m%d_%H%M")" >> $GITHUB_ENV
      - name: Version Number Output
        id: version_number
        run: |
          echo "Printing Customed Version Value: ${{ env.CUSTOMED_VERSION_NUMBER }}"
          echo "version=${{ env.CUSTOMED_VERSION_NUMBER }}" >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v2
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.CUSTOMED_VERSION_NUMBER }}
          token: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}

  build-multi-arch:
    name: Build Multi Architecture NodeJS
    runs-on: ubuntu-latest
    needs: [create-release]
    outputs:
      backend_image_url: ${{ steps.backend.outputs.BACKEND_IMAGE_TAG }}
      frontend_image_url: ${{ steps.frontend.outputs.FRONTEND_IMAGE_TAG }}
    steps:
      # Get the repo's code
      - name: Checkout
        uses: actions/checkout@v3

      # Optional: Update the html file inside the repo
      # Uncomment if you need this step
      # - name: Update the html file inside the repo
      #   run: |
      #     sed -i "s/VERSION_PLACE_HOLDER/${{ needs.create-release.outputs.version }}/g" ./src/index.html
      #     cat ./src/index.html

      # Set up QEMU for multi-architecture support
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      # Log in to GitHub Container Registry (GHCR)
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}

      # Convert repository owner to lowercase
      - name: Set lower case owner name
        run: |
          echo "REPOSITORY_OWNER_LOWER=${{ github.repository_owner }}" >> $GITHUB_ENV

      # Set backend image tag name
      - name: Set backend image tag name
        id: backend
        run: |
          BACKEND_IMAGE_TAG="ghcr.io/${{ env.REPOSITORY_OWNER_LOWER }}/quizhub-backend:${{ needs.create-release.outputs.version }}"
          echo "BACKEND_IMAGE_TAG=$BACKEND_IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=BACKEND_IMAGE_TAG::$BACKEND_IMAGE_TAG"

      # Build and push Backend Docker image
      - name: Build and push Backend Image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.BACKEND_IMAGE_TAG }}

      # Run backend container using the built image
      - name: Run backend container
        run: |
          docker run -d -p 3001:80 ${{ env.BACKEND_IMAGE_TAG }}
      - name: Wait for backend to be ready
        run: |
          until curl -s http://localhost:3001/api/health; do
              echo "Waiting for backend to be ready..."
              sleep 5
          done

      # Set frontend image tag name
      - name: Set frontend image tag name
        id: frontend
        run: |
          FRONTEND_IMAGE_TAG="ghcr.io/${{ env.REPOSITORY_OWNER_LOWER }}/quizhub-frontend:${{ needs.create-release.outputs.version }}"
          echo "FRONTEND_IMAGE_TAG=$FRONTEND_IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=FRONTEND_IMAGE_TAG::$FRONTEND_IMAGE_TAG"

      # Build and push Frontend Docker image
      - name: Build and push Frontend Image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.FRONTEND_IMAGE_TAG }}

  deploy:
    name: Deploy SSH to VM
    runs-on: ubuntu-latest
    needs: [create-release, build-multi-arch]
    steps:
      - name: Execute SSH commands into the VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP_VP }}
          username: ubuntu
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script: |
            docker ps -q | grep -q . && docker stop $(docker ps -q) || echo "No running containers to stop."
            docker system prune -af
            echo "removing all the previous images and containers"
            docker pull ${{ needs.build-multi-arch.outputs.backend_image_url }}
            docker pull ${{ needs.build-multi-arch.outputs.frontend_image_url }}
            docker container run -d -p 3001:80 ${{ needs.build-multi-arch.outputs.backend_image_url }}
            docker container run -d -p 3000:3000 ${{ needs.build-multi-arch.outputs.frontend_image_url }}
